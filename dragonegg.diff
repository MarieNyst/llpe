diff -uN -r ./llvm-convert.cpp /tmp/dragonegg-2.8//llvm-convert.cpp
--- ./llvm-convert.cpp	2012-09-18 16:34:04.685404235 +0100
+++ /tmp/dragonegg-2.8//llvm-convert.cpp	2010-10-12 05:53:31.000000000 +0100
@@ -3132,39 +3132,6 @@
   }
 }
 
-/// isOperandMentioned - Return true if the given operand is explicitly
-/// mentioned in the asm string.  For example if passed operand 1 then
-/// this routine checks that the asm string does not contain "%1".
-static bool isOperandMentioned(gimple stmt, unsigned OpNum) {
-  // If this is a non-extended ASM then the contents of the asm string are not
-  // to be interpreted.
-  if (gimple_asm_input_p(stmt))
-    return false;
-  // Search for a non-escaped '%' character followed by OpNum.
-  for (const char *AsmStr = gimple_asm_string(stmt); *AsmStr; ++AsmStr) {
-    if (*AsmStr != '%')
-      // Not a '%', move on to next character.
-      continue;
-    char Next = AsmStr[1];
-    // If this is "%%" then the '%' is escaped - skip both '%' characters.
-    if (Next == '%') {
-      ++AsmStr;
-      continue;
-    }
-    // Whitespace is not allowed between the '%' and the number, so check that
-    // the next character is a digit.
-    if (!ISDIGIT(Next))
-      continue;
-    char *EndPtr;
-    // If this is an explicit reference to OpNum then we are done.
-    if (OpNum == strtoul(AsmStr+1, &EndPtr, 10))
-      return true;
-    // Otherwise, skip over the number and keep scanning.
-    AsmStr = EndPtr - 1;
-  }
-  return false;
-}
-
 /// CanonicalizeConstraint - If we can canonicalize the constraint into
 /// something simpler, do so now.  This turns register classes with a single
 /// register into the register itself, expands builtin constraints to multiple
@@ -6779,15 +6746,9 @@
   std::string ConstraintStr;
   bool HasSideEffects = gimple_asm_volatile_p(stmt) || !outputs;
 
+  // StoreCallResultAddr - The pointer to store the result of the call through.
+  SmallVector<Value *, 4> StoreCallResultAddrs;
   SmallVector<const Type *, 4> CallResultTypes;
-  
-  // CallResultDests - Each result returned by the inline asm call is stored in
-  // a memory location.  These are listed here along with a flag indicating if
-  // the GCC type corresponding to the memory location is signed.  The type of
-  // the memory location is allowed to differ from the type of the call result,
-  // in which case the result is converted before being stored.
-  SmallVector<std::pair<Value *, bool>, 4> CallResultDests;
-
   SmallVector<bool, 4> CallResultIsSigned;
   SmallVector<std::pair<bool, unsigned>, 4> OutputLocations;
   SmallVector<tree, 4> CallResultSSANames;
@@ -6848,28 +6809,27 @@
     }
 
     LValue Dest;
-    const Type *DestValTy = ConvertType(TREE_TYPE(Operand));
+    const Type *DestValTy;
     if (TREE_CODE(Operand) == SSA_NAME) {
       // The ASM is defining an ssa name.  Store the output to a temporary, then
       // load it out again later as the ssa name.
+      DestValTy = ConvertType(TREE_TYPE(Operand));
       MemRef TmpLoc = CreateTempLoc(DestValTy);
       CallResultSSANames.push_back(Operand);
       CallResultSSATemps.push_back(TmpLoc);
       Dest = LValue(TmpLoc);
     } else {
       Dest = EmitLV(Operand);
-      assert(cast<PointerType>(Dest.Ptr->getType())->getElementType() ==
-	     DestValTy && "LValue has wrong type!");
+      DestValTy = cast<PointerType>(Dest.Ptr->getType())->getElementType();
     }
 
     assert(!Dest.isBitfield() && "Cannot assign into a bitfield!");
     if (!AllowsMem && DestValTy->isSingleValueType()) {// Reg dest -> asm return
+      StoreCallResultAddrs.push_back(Dest.Ptr);
       ConstraintStr += ",=";
       ConstraintStr += SimplifiedConstraint;
-      bool IsSigned = !TYPE_UNSIGNED(TREE_TYPE(Operand));
       CallResultTypes.push_back(DestValTy);
       CallResultIsSigned.push_back(!TYPE_UNSIGNED(TREE_TYPE(Operand)));
-      CallResultDests.push_back(std::make_pair(Dest.Ptr, IsSigned));
       OutputLocations.push_back(std::make_pair(true, CallResultTypes.size()-1));
     } else {
       ConstraintStr += ",=*";
@@ -6881,11 +6841,9 @@
   }
 
   // Process inputs.
-  unsigned i = 0;
-  for (tree Input = inputs; Input; Input = TREE_CHAIN(Input),++ValNum,++i) {
+  for (tree Input = inputs; Input; Input = TREE_CHAIN(Input),++ValNum) {
     tree Val = TREE_VALUE(Input);
     tree type = TREE_TYPE(Val);
-    bool IsSigned = !TYPE_UNSIGNED(type);
 
     const char *Constraint = Constraints[ValNum];
 
@@ -6955,14 +6913,12 @@
         // This output might have gotten put in either CallResult or CallArg
         // depending whether it's a register or not.  Find its type.
         const Type *OTy = 0;
-	unsigned OutputIndex = ~0U;
         if (Match < OutputLocations.size()) {
           // Indices here known to be within range.
-	  OutputIndex = OutputLocations[Match].second;
           if (OutputLocations[Match].first)
-            OTy = CallResultTypes[OutputIndex];
+            OTy = CallResultTypes[OutputLocations[Match].second];
           else {
-            OTy = CallArgTypes[OutputIndex];
+            OTy = CallArgTypes[OutputLocations[Match].second];
             assert(OTy->isPointerTy() && "Expected pointer type!");
             OTy = cast<PointerType>(OTy)->getElementType();
           }
@@ -6979,38 +6935,25 @@
           }
           unsigned OTyBits = TD.getTypeSizeInBits(OTy);
           unsigned OpTyBits = TD.getTypeSizeInBits(OpTy);
-          if (OTyBits == 0 || OpTyBits == 0) {
-            error_at(gimple_location(stmt), "unsupported inline asm: input "
-                     "constraint with a matching output constraint of "
-                     "incompatible type!");
+          if (OTyBits == 0 || OpTyBits == 0 || OTyBits < OpTyBits) {
+            // It's tempting to implement the OTyBits < OpTyBits case by 
+            // truncating Op down to OTy, however that breaks in the case of an 
+            // inline asm constraint that corresponds to a single register, 
+            // because the user can write code that assumes the whole register 
+            // is defined, despite the output operand being only a subset of the
+            // register. For example:
+            //
+            //   asm ("sarl $10, %%eax" : "=a"(c) : "0"(1000000));
+            //
+            // The expected behavior is for %eax to be fully defined with the 
+            // value 1000000 immediately before the asm.
+            error_at(gimple_location(stmt),
+                     "unsupported inline asm: input constraint with a matching "
+                     "output constraint of incompatible type!");
             return;
-          } else if (OTyBits < OpTyBits) {
-            // The output is smaller than the input.  If the output is not a
-            // register then bail out.  Likewise, if the output is explicitly
-            // mentioned in the asm string then we cannot safely promote it,
-            // so bail out in this case too.
-            if (!OutputLocations[Match].first ||
-                isOperandMentioned(stmt, Match)) {
-              error_at(gimple_location(stmt), "unsupported inline asm: input "
-                       "constraint with a matching output constraint of "
-                       "incompatible type!");
-              return;
-            }
-            // Use the input type for the output, and arrange for the result to
-            // be truncated to the original output type after the asm call.
-            CallResultTypes[OutputIndex] = OpTy;
           } else if (OTyBits > OpTyBits) {
-            // The input is smaller than the output.  If the input is explicitly
-            // mentioned in the asm string then we cannot safely promote it, so
-            // bail out.
-            if (isOperandMentioned(stmt, NumOutputs + i)) {
-              error_at(gimple_location(stmt), "unsupported inline asm: input "
-                       "constraint with a matching output constraint of "
-                       "incompatible type!");
-              return;
-            }
-            Op = CastToAnyType(Op, IsSigned, OTy,
-                               CallResultIsSigned[OutputIndex]);
+            Op = CastToAnyType(Op, !TYPE_UNSIGNED(type),
+                               OTy, CallResultIsSigned[Match]);
             if (BYTES_BIG_ENDIAN) {
               Constant *ShAmt = ConstantInt::get(Op->getType(),
                                                  OTyBits-OpTyBits);
@@ -7117,17 +7060,13 @@
   CV->setDoesNotThrow();
 
   // If the call produces a value, store it into the destination.
-  for (unsigned i = 0, NumResults = CallResultTypes.size(); i != NumResults;
-       ++i) {
-    Value *Val = NumResults == 1 ?
-      CV : Builder.CreateExtractValue(CV, i, "asmresult");
-    bool ValIsSigned = CallResultIsSigned[i];
-
-    Value *Dest = CallResultDests[i].first;
-    const Type *DestTy = cast<PointerType>(Dest->getType())->getElementType();
-    bool DestIsSigned = CallResultDests[i].second;
-    Val = CastToAnyType(Val, ValIsSigned, DestTy, DestIsSigned);
-    Builder.CreateStore(Val, Dest);
+  if (StoreCallResultAddrs.size() == 1)
+    Builder.CreateStore(CV, StoreCallResultAddrs[0]);
+  else if (unsigned NumResults = StoreCallResultAddrs.size()) {
+    for (unsigned i = 0; i != NumResults; ++i) {
+      Value *ValI = Builder.CreateExtractValue(CV, i, "asmresult");
+      Builder.CreateStore(ValI, StoreCallResultAddrs[i]);
+    }
   }
 
   // If the call defined any ssa names, associate them with their value.
diff -uN -r ./Makefile /tmp/dragonegg-2.8//Makefile
--- ./Makefile	2012-09-18 16:00:49.937319249 +0100
+++ /tmp/dragonegg-2.8//Makefile	2010-10-11 18:35:18.000000000 +0100
@@ -71,8 +71,8 @@
 
 $(TARGET_UTIL): $(TARGET_UTIL_OBJECTS)
 	@echo Linking $@
-	$(QUIET)$(CXX) -o $@ $^ $(shell $(LLVM_CONFIG) --libs support) \
-	$(LD_OPTIONS)
+	$(QUIET)$(CXX) -o $@ $^ $(LD_OPTIONS) \
+	$(shell $(LLVM_CONFIG) --libs support)
 
 %.o : $(SRC_DIR)/%.c $(TARGET_UTIL)
 	@echo Compiling $*.c
@@ -90,9 +90,9 @@
 $(PLUGIN): $(PLUGIN_OBJECTS) $(TARGET_OBJECT) $(TARGET_UTIL)
 	@echo Linking $@
 	$(QUIET)$(CXX) -o $@ $(LOADABLE_MODULE_OPTIONS) $(CXXFLAGS) \
-	$(PLUGIN_OBJECTS) $(TARGET_OBJECT) \
+	$(LD_OPTIONS) $(PLUGIN_OBJECTS) $(TARGET_OBJECT) \
 	$(shell $(LLVM_CONFIG) --libs analysis core ipo scalaropts target \
-	$(shell $(TARGET_UTIL) -p)) $(LD_OPTIONS)
+	$(shell $(TARGET_UTIL) -p))
 
 clean::
 	$(QUIET)rm -f *.o *.d $(PLUGIN) $(TARGET_UTIL)
