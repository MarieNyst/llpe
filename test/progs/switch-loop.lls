; ModuleID = 'switch-loop.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.ident\09\22GCC: (GNU) 4.5.3 LLVM: exported\22"

%char = type i8
%int = type i32

define i32 @main(i32 %argc, i8** %argv) nounwind {
entry:
  %"alloca point" = bitcast i32 0 to i32
  %"ssa point" = bitcast i32 0 to i32
  br label %"2"

"2":                                              ; preds = %entry
  br label %"3"

"3":                                              ; preds = %"4", %"2"
  %0 = phi i32 [ %1, %"3" ], [ 0, %"2" ]
  %1 = add nsw i32 %0, 2
  switch i32 %1, label %"3" [
    i32 10, label %"8"
    i32 12, label %"5"
    i32 14, label %"7"
    i32 16, label %"6"
  ]

"5":                                              ; preds = %"3"
  %.lcssa1 = phi i32 [ %1, %"3" ]
  br label %"9"

"6":                                              ; preds = %"3"
  %.lcssa3 = phi i32 [ %1, %"3" ]
  br label %"10"

"7":                                              ; preds = %"3"
  %.lcssa2 = phi i32 [ %1, %"3" ]
  br label %"11"

"8":                                              ; preds = %"3"
  %.lcssa = phi i32 [ %1, %"3" ]
  br label %"12"

"9":                                              ; preds = %"5"
  %2 = add nsw i32 %.lcssa1, 1
  br label %"10"

"10":                                             ; preds = %"9", %"6"
  %3 = phi i32 [ %2, %"9" ], [ %.lcssa3, %"6" ]
  %4 = add nsw i32 %3, 1
  br label %"11"

"11":                                             ; preds = %"10", %"7"
  %5 = phi i32 [ %4, %"10" ], [ %.lcssa2, %"7" ]
  %6 = add nsw i32 %5, 1
  br label %"12"

"12":                                             ; preds = %"11", %"8"
  %7 = phi i32 [ %6, %"11" ], [ %.lcssa, %"8" ]
  br label %return

return:                                           ; preds = %"12"
  ret i32 %7
}
